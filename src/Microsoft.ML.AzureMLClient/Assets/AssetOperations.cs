// <copyright file = "AssetOperations.cs" company="Microsoft">
// Copyright (c) Microsoft. All rights reserved.
// </copyright>

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

using Azure.MachineLearning.Services.GeneratedOld;

namespace Azure.MachineLearning.Services.Assets
{
    public class AssetOperations
    {
        public AssetOperations(ServiceContext serviceContext)
        {
            Throw.IfNull(serviceContext, nameof(serviceContext));
            this.ServiceContext = serviceContext;
        }

        public ServiceContext ServiceContext { get; private set; }

        public IEnumerable<Asset> List() => throw new NotImplementedException();

        public async Task<Asset> GetAsync(
            string id,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            Throw.IfNullOrEmpty(id, nameof(id));

            // Create instance of autogenerated client
            var restClient = new RestClient(this.ServiceContext.Credentials);
            restClient.BaseUri = this.ServiceContext.AssetsEndpoint;

            // Send the query
            GeneratedOld.Models.Asset assetDto = await RestCallWrapper.WrapAsync(
                () => restClient.Asset.QueryByIdWithHttpMessagesAsync(
                    this.ServiceContext.SubscriptionId,
                    this.ServiceContext.ResourceGroupName,
                    this.ServiceContext.WorkspaceName,
                    id,
                    customHeaders: customHeaders,
                    cancellationToken: cancellationToken)).ConfigureAwait(false);

            return new Asset(this.ServiceContext, assetDto);
        }

        public async Task<Asset> CreateAsync(
            AssetCreationRequest creationRequest,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            Throw.IfNull(creationRequest, nameof(creationRequest));

            // Create instance of autogenerated client
            var restClient = new RestClient(this.ServiceContext.Credentials);
            restClient.BaseUri = this.ServiceContext.AssetsEndpoint;

            GeneratedOld.Models.Asset dto = creationRequest.ToDto();

            GeneratedOld.Models.Asset createdAssetDto = await RestCallWrapper.WrapAsync(
                () => restClient.Asset.CreateWithHttpMessagesAsync(
                    this.ServiceContext.SubscriptionId,
                    this.ServiceContext.ResourceGroupName,
                    this.ServiceContext.WorkspaceName,
                    dto,
                    customHeaders: customHeaders,
                    cancellationToken: cancellationToken)).ConfigureAwait(false);

            return new Asset(this.ServiceContext, createdAssetDto);
        }
    }
}
