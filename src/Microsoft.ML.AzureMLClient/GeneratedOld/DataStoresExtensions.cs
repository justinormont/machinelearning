// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DataStores.
    /// </summary>
    public static partial class DataStoresExtensions
    {
            /// <summary>
            /// Get Datastores list.
            /// </summary>
            /// <remarks>
            /// Get the list of Datastores attached to the workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure subscription Id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='dataStoreNames'>
            /// List of Datastore names.
            /// </param>
            /// <param name='continuationToken'>
            /// The Continuation Token.
            /// </param>
            /// <param name='count'>
            /// Count of Datastores to be returned.
            /// </param>
            /// <param name='includeSecret'>
            /// Whether to include the datastore secret in the response.
            /// </param>
            public static PaginatedDataStoreList List(this IDataStores operations, string subscriptionId, string resourceGroupName, string workspaceName, IList<string> dataStoreNames = default(IList<string>), string continuationToken = default(string), int? count = 30, bool? includeSecret = true)
            {
                return operations.ListAsync(subscriptionId, resourceGroupName, workspaceName, dataStoreNames, continuationToken, count, includeSecret).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Datastores list.
            /// </summary>
            /// <remarks>
            /// Get the list of Datastores attached to the workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure subscription Id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='dataStoreNames'>
            /// List of Datastore names.
            /// </param>
            /// <param name='continuationToken'>
            /// The Continuation Token.
            /// </param>
            /// <param name='count'>
            /// Count of Datastores to be returned.
            /// </param>
            /// <param name='includeSecret'>
            /// Whether to include the datastore secret in the response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedDataStoreList> ListAsync(this IDataStores operations, string subscriptionId, string resourceGroupName, string workspaceName, IList<string> dataStoreNames = default(IList<string>), string continuationToken = default(string), int? count = 30, bool? includeSecret = true, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, dataStoreNames, continuationToken, count, includeSecret, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a Datastore.
            /// </summary>
            /// <remarks>
            /// Create or update a Datastore in the given workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure subscription Id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='dto'>
            /// The Datastore details.
            /// </param>
            /// <param name='createIfNotExists'>
            /// If set to true, the call will create an Datastore if it doesn't exist.
            /// </param>
            /// <param name='skipValidation'>
            /// If set to true, the call will skip Datastore validation.
            /// </param>
            public static void Create(this IDataStores operations, string subscriptionId, string resourceGroupName, string workspaceName, DataStore dto = default(DataStore), bool? createIfNotExists = false, bool? skipValidation = false)
            {
                operations.CreateAsync(subscriptionId, resourceGroupName, workspaceName, dto, createIfNotExists, skipValidation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Datastore.
            /// </summary>
            /// <remarks>
            /// Create or update a Datastore in the given workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure subscription Id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='dto'>
            /// The Datastore details.
            /// </param>
            /// <param name='createIfNotExists'>
            /// If set to true, the call will create an Datastore if it doesn't exist.
            /// </param>
            /// <param name='skipValidation'>
            /// If set to true, the call will skip Datastore validation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateAsync(this IDataStores operations, string subscriptionId, string resourceGroupName, string workspaceName, DataStore dto = default(DataStore), bool? createIfNotExists = false, bool? skipValidation = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, dto, createIfNotExists, skipValidation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete all Datastores.
            /// </summary>
            /// <remarks>
            /// Delete all Datastores in the workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure subscription Id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            public static void DeleteAll(this IDataStores operations, string subscriptionId, string resourceGroupName, string workspaceName)
            {
                operations.DeleteAllAsync(subscriptionId, resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete all Datastores.
            /// </summary>
            /// <remarks>
            /// Delete all Datastores in the workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure subscription Id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAllAsync(this IDataStores operations, string subscriptionId, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAllWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Datastore details.
            /// </summary>
            /// <remarks>
            /// Get details of a Datastore with a specific name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The Datastore name.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure subscription Id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            public static DataStore Get(this IDataStores operations, string name, string subscriptionId, string resourceGroupName, string workspaceName)
            {
                return operations.GetAsync(name, subscriptionId, resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Datastore details.
            /// </summary>
            /// <remarks>
            /// Get details of a Datastore with a specific name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The Datastore name.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure subscription Id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataStore> GetAsync(this IDataStores operations, string name, string subscriptionId, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(name, subscriptionId, resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update or create a Datastore.
            /// </summary>
            /// <remarks>
            /// Update or create a Datastore in the given workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The Datastore name.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure subscription Id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='dto'>
            /// The Datastore details.
            /// </param>
            /// <param name='createIfNotExists'>
            /// If set to true, the call will create an Datastore if it doesn't exist.
            /// </param>
            /// <param name='skipValidation'>
            /// If set to true, the call will skip Datastore validation.
            /// </param>
            public static void Update(this IDataStores operations, string name, string subscriptionId, string resourceGroupName, string workspaceName, DataStore dto = default(DataStore), bool? createIfNotExists = false, bool? skipValidation = false)
            {
                operations.UpdateAsync(name, subscriptionId, resourceGroupName, workspaceName, dto, createIfNotExists, skipValidation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update or create a Datastore.
            /// </summary>
            /// <remarks>
            /// Update or create a Datastore in the given workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The Datastore name.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure subscription Id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='dto'>
            /// The Datastore details.
            /// </param>
            /// <param name='createIfNotExists'>
            /// If set to true, the call will create an Datastore if it doesn't exist.
            /// </param>
            /// <param name='skipValidation'>
            /// If set to true, the call will skip Datastore validation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAsync(this IDataStores operations, string name, string subscriptionId, string resourceGroupName, string workspaceName, DataStore dto = default(DataStore), bool? createIfNotExists = false, bool? skipValidation = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateWithHttpMessagesAsync(name, subscriptionId, resourceGroupName, workspaceName, dto, createIfNotExists, skipValidation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete a Datastore.
            /// </summary>
            /// <remarks>
            /// Delete a Datastore with a specific name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The Datastore name.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure subscription Id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            public static void Delete(this IDataStores operations, string name, string subscriptionId, string resourceGroupName, string workspaceName)
            {
                operations.DeleteAsync(name, subscriptionId, resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Datastore.
            /// </summary>
            /// <remarks>
            /// Delete a Datastore with a specific name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The Datastore name.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure subscription Id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDataStores operations, string name, string subscriptionId, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(name, subscriptionId, resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Set a default Datastore.
            /// </summary>
            /// <remarks>
            /// Set a default Datastore in the workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The Datastore name.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure subscription Id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            public static void SetDefault(this IDataStores operations, string name, string subscriptionId, string resourceGroupName, string workspaceName)
            {
                operations.SetDefaultAsync(name, subscriptionId, resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set a default Datastore.
            /// </summary>
            /// <remarks>
            /// Set a default Datastore in the workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The Datastore name.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure subscription Id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetDefaultAsync(this IDataStores operations, string name, string subscriptionId, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetDefaultWithHttpMessagesAsync(name, subscriptionId, resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the default Datastore.
            /// </summary>
            /// <remarks>
            /// Get the default Datastore in the workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure subscription Id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            public static DataStore GetDefault(this IDataStores operations, string subscriptionId, string resourceGroupName, string workspaceName)
            {
                return operations.GetDefaultAsync(subscriptionId, resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the default Datastore.
            /// </summary>
            /// <remarks>
            /// Get the default Datastore in the workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure subscription Id.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataStore> GetDefaultAsync(this IDataStores operations, string subscriptionId, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDefaultWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
