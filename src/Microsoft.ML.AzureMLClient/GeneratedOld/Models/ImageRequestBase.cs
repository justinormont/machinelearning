// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Request to create an Azure Machine Learning Image
    /// </summary>
    public partial class ImageRequestBase
    {
        /// <summary>
        /// Initializes a new instance of the ImageRequestBase class.
        /// </summary>
        public ImageRequestBase()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImageRequestBase class.
        /// </summary>
        /// <param name="kvTags">Service tag dictionary</param>
        /// <param name="properties">Service property dictionary</param>
        public ImageRequestBase(string name, string driverProgram, TargetRuntime targetRuntime, string description = default(string), string imageType = default(string), string imageFlavor = default(string), IList<string> modelIds = default(IList<string>), IList<string> tags = default(IList<string>), IList<ImageAsset> assets = default(IList<ImageAsset>), IDictionary<string, string> kvTags = default(IDictionary<string, string>), IDictionary<string, string> properties = default(IDictionary<string, string>))
        {
            Name = name;
            Description = description;
            DriverProgram = driverProgram;
            ImageType = imageType;
            ImageFlavor = imageFlavor;
            ModelIds = modelIds;
            Tags = tags;
            Assets = assets;
            TargetRuntime = targetRuntime;
            KvTags = kvTags;
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "driverProgram")]
        public string DriverProgram { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "imageType")]
        public string ImageType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "imageFlavor")]
        public string ImageFlavor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modelIds")]
        public IList<string> ModelIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<string> Tags { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assets")]
        public IList<ImageAsset> Assets { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "targetRuntime")]
        public TargetRuntime TargetRuntime { get; set; }

        /// <summary>
        /// Gets or sets service tag dictionary
        /// </summary>
        [JsonProperty(PropertyName = "kvTags")]
        public IDictionary<string, string> KvTags { get; set; }

        /// <summary>
        /// Gets or sets service property dictionary
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (DriverProgram == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DriverProgram");
            }
            if (TargetRuntime == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetRuntime");
            }
            if (Assets != null)
            {
                foreach (var element in Assets)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
