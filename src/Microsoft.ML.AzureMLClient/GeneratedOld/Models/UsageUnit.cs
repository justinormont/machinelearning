// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for UsageUnit.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(UsageUnitConverter))]
    public struct UsageUnit : System.IEquatable<UsageUnit>
    {
        private UsageUnit(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly UsageUnit Count = "Count";


        /// <summary>
        /// Underlying value of enum UsageUnit
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for UsageUnit
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type UsageUnit
        /// </summary>
        public bool Equals(UsageUnit e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to UsageUnit
        /// </summary>
        public static implicit operator UsageUnit(string value)
        {
            return new UsageUnit(value);
        }

        /// <summary>
        /// Implicit operator to convert UsageUnit to string
        /// </summary>
        public static implicit operator string(UsageUnit e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum UsageUnit
        /// </summary>
        public static bool operator == (UsageUnit e1, UsageUnit e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum UsageUnit
        /// </summary>
        public static bool operator != (UsageUnit e1, UsageUnit e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for UsageUnit
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is UsageUnit && Equals((UsageUnit)obj);
        }

        /// <summary>
        /// Returns for hashCode UsageUnit
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
