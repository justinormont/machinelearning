// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Docker image response
    /// </summary>
    public partial class DockerImage : Image
    {
        /// <summary>
        /// Initializes a new instance of the DockerImage class.
        /// </summary>
        public DockerImage()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DockerImage class.
        /// </summary>
        /// <param name="name">The image name.</param>
        /// <param name="id">The image id.</param>
        /// <param name="version">The image version.</param>
        /// <param name="description">The image description.</param>
        /// <param name="tags">The list of image tags.</param>
        /// <param name="createdTime">Time image was created.</param>
        /// <param name="creationState">Possible values include: 'NotStarted',
        /// 'Running', 'Cancelled', 'Succeeded', 'Failed'</param>
        /// <param name="dockerFileUri">The Uri to the docker file.</param>
        /// <param name="imageLocation">Image location string.</param>
        /// <param name="imageBuildLogUri">The Uri to the image build
        /// logs.</param>
        /// <param name="generatedDockerFileUri">The Uri to the generated
        /// docker file.</param>
        public DockerImage(string name, string imageRequestTypeDiscriminator, string id = default(string), int? version = default(int?), string description = default(string), IList<string> tags = default(IList<string>), System.DateTime? createdTime = default(System.DateTime?), string imageType = default(string), string creationState = default(string), ModelErrorResponse error = default(ModelErrorResponse), IList<string> modelIds = default(IList<string>), IList<Model> modelDetails = default(IList<Model>), string driverProgram = default(string), IList<ImageAsset> assets = default(IList<ImageAsset>), TargetRuntime targetRuntime = default(TargetRuntime), string dockerFileUri = default(string), string imageLocation = default(string), string imageBuildLogUri = default(string), string generatedDockerFileUri = default(string))
            : base(name, imageRequestTypeDiscriminator, id, version, description, tags, createdTime, imageType, creationState, error, modelIds, modelDetails, driverProgram, assets, targetRuntime)
        {
            DockerFileUri = dockerFileUri;
            ImageLocation = imageLocation;
            ImageBuildLogUri = imageBuildLogUri;
            GeneratedDockerFileUri = generatedDockerFileUri;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Uri to the docker file.
        /// </summary>
        [JsonProperty(PropertyName = "dockerFileUri")]
        public string DockerFileUri { get; set; }

        /// <summary>
        /// Gets or sets image location string.
        /// </summary>
        [JsonProperty(PropertyName = "imageLocation")]
        public string ImageLocation { get; set; }

        /// <summary>
        /// Gets or sets the Uri to the image build logs.
        /// </summary>
        [JsonProperty(PropertyName = "imageBuildLogUri")]
        public string ImageBuildLogUri { get; set; }

        /// <summary>
        /// Gets or sets the Uri to the generated docker file.
        /// </summary>
        [JsonProperty(PropertyName = "generatedDockerFileUri")]
        public string GeneratedDockerFileUri { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
