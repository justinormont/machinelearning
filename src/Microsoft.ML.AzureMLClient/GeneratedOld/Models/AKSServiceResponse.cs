// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Response for an AKS service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AKS")]
    public partial class AKSServiceResponse : ServiceResponseBase
    {
        /// <summary>
        /// Initializes a new instance of the AKSServiceResponse class.
        /// </summary>
        public AKSServiceResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AKSServiceResponse class.
        /// </summary>
        /// <param name="createdTime">The time the service was created.</param>
        /// <param name="deploymentType">The deployment type for the service.
        /// Possible values include: 'GRPCRealtimeEndpoint',
        /// 'HttpRealtimeEndpoint'</param>
        /// <param name="description">The service description.</param>
        /// <param name="error">The error details.</param>
        /// <param name="id">The service Id.</param>
        /// <param name="kvTags">The service tag dictionary. Tags are
        /// mutable.</param>
        /// <param name="name">The service name.</param>
        /// <param name="properties">The service property dictionary.
        /// Properties are immutable.</param>
        /// <param name="state">The current state of the service. Possible
        /// values include: 'Transitioning', 'Healthy', 'Unhealthy',
        /// 'Failed'</param>
        /// <param name="tags">The service tag list.</param>
        /// <param name="updatedTime">The time the service was updated.</param>
        /// <param name="imageId">The id of the image.</param>
        /// <param name="modelsProperty">Enumerable of models</param>
        /// <param name="maxConcurrentRequestsPerContainer">Maximum number of
        /// concurrent requests per container.</param>
        /// <param name="maxQueueWaitMs">Maximum time a request will wait in
        /// the queue (in milliseconds). After this time, the service will
        /// return 503 (Service Unavailable)</param>
        /// <param name="computeName">Id of the compute resource.</param>
        /// <param name="numReplicas">Number of replicas on the
        /// cluster.</param>
        /// <param name="appInsightsEnabled">Enable or disable app
        /// insights.</param>
        /// <param name="scoringUri">Uri for sending scoring requests.</param>
        /// <param name="scoringTimeoutMs">Scoring timeout in
        /// milliseconds.</param>
        public AKSServiceResponse(System.DateTime? createdTime = default(System.DateTime?), DeploymentType? deploymentType = default(DeploymentType?), string description = default(string), ModelErrorResponse error = default(ModelErrorResponse), string id = default(string), IDictionary<string, string> kvTags = default(IDictionary<string, string>), string name = default(string), IDictionary<string, string> properties = default(IDictionary<string, string>), WebServiceState? state = default(WebServiceState?), IList<string> tags = default(IList<string>), System.DateTime? updatedTime = default(System.DateTime?), DockerImageResponse imageDetails = default(DockerImageResponse), string imageId = default(string), IList<Model> modelsProperty = default(IList<Model>), ContainerResourceRequirements containerResourceRequirements = default(ContainerResourceRequirements), LivenessProbeRequirements livenessProbeRequirements = default(LivenessProbeRequirements), int? maxConcurrentRequestsPerContainer = default(int?), int? maxQueueWaitMs = default(int?), string computeName = default(string), int? numReplicas = default(int?), ModelDataCollection dataCollection = default(ModelDataCollection), bool? appInsightsEnabled = default(bool?), AutoScaler autoScaler = default(AutoScaler), string scoringUri = default(string), AKSReplicaStatus deploymentStatus = default(AKSReplicaStatus), int? scoringTimeoutMs = default(int?))
            : base(createdTime, deploymentType, description, error, id, kvTags, name, properties, state, tags, updatedTime)
        {
            ImageDetails = imageDetails;
            ImageId = imageId;
            ModelsProperty = modelsProperty;
            ContainerResourceRequirements = containerResourceRequirements;
            LivenessProbeRequirements = livenessProbeRequirements;
            MaxConcurrentRequestsPerContainer = maxConcurrentRequestsPerContainer;
            MaxQueueWaitMs = maxQueueWaitMs;
            ComputeName = computeName;
            NumReplicas = numReplicas;
            DataCollection = dataCollection;
            AppInsightsEnabled = appInsightsEnabled;
            AutoScaler = autoScaler;
            ScoringUri = scoringUri;
            DeploymentStatus = deploymentStatus;
            ScoringTimeoutMs = scoringTimeoutMs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "imageDetails")]
        public DockerImageResponse ImageDetails { get; set; }

        /// <summary>
        /// Gets or sets the id of the image.
        /// </summary>
        [JsonProperty(PropertyName = "imageId")]
        public string ImageId { get; set; }

        /// <summary>
        /// Gets or sets enumerable of models
        /// </summary>
        [JsonProperty(PropertyName = "models")]
        public IList<Model> ModelsProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "containerResourceRequirements")]
        public ContainerResourceRequirements ContainerResourceRequirements { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "livenessProbeRequirements")]
        public LivenessProbeRequirements LivenessProbeRequirements { get; set; }

        /// <summary>
        /// Gets or sets maximum number of concurrent requests per container.
        /// </summary>
        [JsonProperty(PropertyName = "maxConcurrentRequestsPerContainer")]
        public int? MaxConcurrentRequestsPerContainer { get; set; }

        /// <summary>
        /// Gets or sets maximum time a request will wait in the queue (in
        /// milliseconds). After this time, the service will return 503
        /// (Service Unavailable)
        /// </summary>
        [JsonProperty(PropertyName = "maxQueueWaitMs")]
        public int? MaxQueueWaitMs { get; set; }

        /// <summary>
        /// Gets or sets id of the compute resource.
        /// </summary>
        [JsonProperty(PropertyName = "computeName")]
        public string ComputeName { get; set; }

        /// <summary>
        /// Gets or sets number of replicas on the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "numReplicas")]
        public int? NumReplicas { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dataCollection")]
        public ModelDataCollection DataCollection { get; set; }

        /// <summary>
        /// Gets or sets enable or disable app insights.
        /// </summary>
        [JsonProperty(PropertyName = "appInsightsEnabled")]
        public bool? AppInsightsEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "autoScaler")]
        public AutoScaler AutoScaler { get; set; }

        /// <summary>
        /// Gets or sets uri for sending scoring requests.
        /// </summary>
        [JsonProperty(PropertyName = "scoringUri")]
        public string ScoringUri { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deploymentStatus")]
        public AKSReplicaStatus DeploymentStatus { get; set; }

        /// <summary>
        /// Gets or sets scoring timeout in milliseconds.
        /// </summary>
        [JsonProperty(PropertyName = "scoringTimeoutMs")]
        public int? ScoringTimeoutMs { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (ImageDetails != null)
            {
                ImageDetails.Validate();
            }
            if (ModelsProperty != null)
            {
                foreach (var element in ModelsProperty)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
