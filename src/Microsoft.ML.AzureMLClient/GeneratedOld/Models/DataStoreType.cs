// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for DataStoreType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(DataStoreTypeConverter))]
    public struct DataStoreType : System.IEquatable<DataStoreType>
    {
        private DataStoreType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly DataStoreType AzureBlob = "AzureBlob";

        public static readonly DataStoreType AzureFile = "AzureFile";

        public static readonly DataStoreType AzureDataLake = "AzureDataLake";

        public static readonly DataStoreType AzureSqlDatabase = "AzureSqlDatabase";

        public static readonly DataStoreType AzurePostgreSql = "AzurePostgreSql";

        public static readonly DataStoreType DBFS = "DBFS";

        public static readonly DataStoreType AzureDataLakeGen2 = "AzureDataLakeGen2";

        public static readonly DataStoreType GlusterFs = "GlusterFs";


        /// <summary>
        /// Underlying value of enum DataStoreType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for DataStoreType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type DataStoreType
        /// </summary>
        public bool Equals(DataStoreType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to DataStoreType
        /// </summary>
        public static implicit operator DataStoreType(string value)
        {
            return new DataStoreType(value);
        }

        /// <summary>
        /// Implicit operator to convert DataStoreType to string
        /// </summary>
        public static implicit operator string(DataStoreType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum DataStoreType
        /// </summary>
        public static bool operator == (DataStoreType e1, DataStoreType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum DataStoreType
        /// </summary>
        public static bool operator != (DataStoreType e1, DataStoreType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for DataStoreType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is DataStoreType && Equals((DataStoreType)obj);
        }

        /// <summary>
        /// Returns for hashCode DataStoreType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
