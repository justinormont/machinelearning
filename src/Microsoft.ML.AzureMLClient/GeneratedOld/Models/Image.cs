// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Image
    {
        /// <summary>
        /// Initializes a new instance of the Image class.
        /// </summary>
        public Image()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Image class.
        /// </summary>
        /// <param name="name">The image name.</param>
        /// <param name="id">The image id.</param>
        /// <param name="version">The image version.</param>
        /// <param name="description">The image description.</param>
        /// <param name="tags">The list of image tags.</param>
        /// <param name="createdTime">Time image was created.</param>
        /// <param name="creationState">Possible values include: 'NotStarted',
        /// 'Running', 'Cancelled', 'Succeeded', 'Failed'</param>
        public Image(string name, string imageRequestTypeDiscriminator, string id = default(string), int? version = default(int?), string description = default(string), IList<string> tags = default(IList<string>), System.DateTime? createdTime = default(System.DateTime?), string imageType = default(string), string creationState = default(string), ModelErrorResponse error = default(ModelErrorResponse), IList<string> modelIds = default(IList<string>), IList<Model> modelDetails = default(IList<Model>), string driverProgram = default(string), IList<ImageAsset> assets = default(IList<ImageAsset>), TargetRuntime targetRuntime = default(TargetRuntime))
        {
            Id = id;
            Name = name;
            Version = version;
            Description = description;
            Tags = tags;
            CreatedTime = createdTime;
            ImageType = imageType;
            CreationState = creationState;
            Error = error;
            ModelIds = modelIds;
            ModelDetails = modelDetails;
            DriverProgram = driverProgram;
            Assets = assets;
            TargetRuntime = targetRuntime;
            ImageRequestTypeDiscriminator = imageRequestTypeDiscriminator;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the image id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the image name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the image version.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public int? Version { get; set; }

        /// <summary>
        /// Gets or sets the image description.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the list of image tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<string> Tags { get; set; }

        /// <summary>
        /// Gets or sets time image was created.
        /// </summary>
        [JsonProperty(PropertyName = "createdTime")]
        public System.DateTime? CreatedTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "imageType")]
        public string ImageType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'NotStarted', 'Running',
        /// 'Cancelled', 'Succeeded', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "creationState")]
        public string CreationState { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public ModelErrorResponse Error { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modelIds")]
        public IList<string> ModelIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modelDetails")]
        public IList<Model> ModelDetails { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "driverProgram")]
        public string DriverProgram { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assets")]
        public IList<ImageAsset> Assets { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "targetRuntime")]
        public TargetRuntime TargetRuntime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "imageRequestTypeDiscriminator")]
        public string ImageRequestTypeDiscriminator { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (ImageRequestTypeDiscriminator == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ImageRequestTypeDiscriminator");
            }
            if (Error != null)
            {
                Error.Validate();
            }
            if (ModelDetails != null)
            {
                foreach (var element in ModelDetails)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Assets != null)
            {
                foreach (var element1 in Assets)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
