// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The operation status
    /// </summary>
    public partial class AsyncOperationStatus
    {
        /// <summary>
        /// Initializes a new instance of the AsyncOperationStatus class.
        /// </summary>
        public AsyncOperationStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AsyncOperationStatus class.
        /// </summary>
        /// <param name="id">The async operation id</param>
        /// <param name="operationType">The async operation type. Possible
        /// values include: 'Image', 'Service'</param>
        /// <param name="state">Possible values include: 'NotStarted',
        /// 'Running', 'Cancelled', 'Succeeded', 'Failed'</param>
        /// <param name="createdTime">The async operation creation time
        /// (UTC)</param>
        /// <param name="endTime">The async operation end time (UTC)</param>
        /// <param name="resourceLocation">The resource created/updated by the
        /// async operation</param>
        public AsyncOperationStatus(string id = default(string), string operationType = default(string), string state = default(string), System.DateTime? createdTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), ModelErrorResponse error = default(ModelErrorResponse), string resourceLocation = default(string))
        {
            Id = id;
            OperationType = operationType;
            State = state;
            CreatedTime = createdTime;
            EndTime = endTime;
            Error = error;
            ResourceLocation = resourceLocation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the async operation id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the async operation type. Possible values include:
        /// 'Image', 'Service'
        /// </summary>
        [JsonProperty(PropertyName = "operationType")]
        public string OperationType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'NotStarted', 'Running',
        /// 'Cancelled', 'Succeeded', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets the async operation creation time (UTC)
        /// </summary>
        [JsonProperty(PropertyName = "createdTime")]
        public System.DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Gets the async operation end time (UTC)
        /// </summary>
        [JsonProperty(PropertyName = "endTime")]
        public System.DateTime? EndTime { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public ModelErrorResponse Error { get; set; }

        /// <summary>
        /// Gets or sets the resource created/updated by the async operation
        /// </summary>
        [JsonProperty(PropertyName = "resourceLocation")]
        public string ResourceLocation { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Error != null)
            {
                Error.Validate();
            }
        }
    }
}
