// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Request to create an AKS service
    /// </summary>
    public partial class AKSServiceCreateRequest : ServiceCreateRequest
    {
        /// <summary>
        /// Initializes a new instance of the AKSServiceCreateRequest class.
        /// </summary>
        public AKSServiceCreateRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AKSServiceCreateRequest class.
        /// </summary>
        /// <param name="name">The service name.</param>
        /// <param name="computeType">The compute environment type for the
        /// service. Possible values include: 'ACI', 'BATCH', 'AKS',
        /// 'FPGA'</param>
        /// <param name="imageId">The id of the image.</param>
        /// <param name="computeName">Id of the compute resource.</param>
        /// <param name="description">The description of the service.</param>
        /// <param name="tags">Service tag list</param>
        /// <param name="kvTags">Service tag dictionary</param>
        /// <param name="properties">Service property dictionary</param>
        /// <param name="numReplicas">Number of replicas on the
        /// cluster.</param>
        /// <param name="appInsightsEnabled">Enable or disable app
        /// insights.</param>
        /// <param name="maxConcurrentRequestsPerContainer">Maximum number of
        /// concurrent requests per container.</param>
        /// <param name="maxQueueWaitMs">Maximum time a message will wait in
        /// the queue (in milliseconds).</param>
        /// <param name="scoringTimeoutMs">Scoring timeout in
        /// milliseconds.</param>
        public AKSServiceCreateRequest(string name, string computeType, string imageId, string computeName, string description = default(string), IList<string> tags = default(IList<string>), IDictionary<string, string> kvTags = default(IDictionary<string, string>), IDictionary<string, string> properties = default(IDictionary<string, string>), int? numReplicas = default(int?), ModelDataCollection dataCollection = default(ModelDataCollection), bool? appInsightsEnabled = default(bool?), AutoScaler autoScaler = default(AutoScaler), ContainerResourceRequirements containerResourceRequirements = default(ContainerResourceRequirements), LivenessProbeRequirements livenessProbeRequirements = default(LivenessProbeRequirements), int? maxConcurrentRequestsPerContainer = default(int?), int? maxQueueWaitMs = default(int?), AuthKeys keys = default(AuthKeys), int? scoringTimeoutMs = default(int?))
            : base(name, computeType, description, tags, kvTags, properties)
        {
            ImageId = imageId;
            NumReplicas = numReplicas;
            DataCollection = dataCollection;
            ComputeName = computeName;
            AppInsightsEnabled = appInsightsEnabled;
            AutoScaler = autoScaler;
            ContainerResourceRequirements = containerResourceRequirements;
            LivenessProbeRequirements = livenessProbeRequirements;
            MaxConcurrentRequestsPerContainer = maxConcurrentRequestsPerContainer;
            MaxQueueWaitMs = maxQueueWaitMs;
            Keys = keys;
            ScoringTimeoutMs = scoringTimeoutMs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the id of the image.
        /// </summary>
        [JsonProperty(PropertyName = "imageId")]
        public string ImageId { get; set; }

        /// <summary>
        /// Gets or sets number of replicas on the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "numReplicas")]
        public int? NumReplicas { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dataCollection")]
        public ModelDataCollection DataCollection { get; set; }

        /// <summary>
        /// Gets or sets id of the compute resource.
        /// </summary>
        [JsonProperty(PropertyName = "computeName")]
        public string ComputeName { get; set; }

        /// <summary>
        /// Gets or sets enable or disable app insights.
        /// </summary>
        [JsonProperty(PropertyName = "appInsightsEnabled")]
        public bool? AppInsightsEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "autoScaler")]
        public AutoScaler AutoScaler { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "containerResourceRequirements")]
        public ContainerResourceRequirements ContainerResourceRequirements { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "livenessProbeRequirements")]
        public LivenessProbeRequirements LivenessProbeRequirements { get; set; }

        /// <summary>
        /// Gets or sets maximum number of concurrent requests per container.
        /// </summary>
        [JsonProperty(PropertyName = "maxConcurrentRequestsPerContainer")]
        public int? MaxConcurrentRequestsPerContainer { get; set; }

        /// <summary>
        /// Gets or sets maximum time a message will wait in the queue (in
        /// milliseconds).
        /// </summary>
        [JsonProperty(PropertyName = "maxQueueWaitMs")]
        public int? MaxQueueWaitMs { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "keys")]
        public AuthKeys Keys { get; set; }

        /// <summary>
        /// Gets or sets scoring timeout in milliseconds.
        /// </summary>
        [JsonProperty(PropertyName = "scoringTimeoutMs")]
        public int? ScoringTimeoutMs { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (ImageId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ImageId");
            }
            if (ComputeName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ComputeName");
            }
        }
    }
}
