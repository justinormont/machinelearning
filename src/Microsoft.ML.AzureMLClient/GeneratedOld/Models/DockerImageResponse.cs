// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Docker image response
    /// </summary>
    public partial class DockerImageResponse : ImageResponseBase
    {
        /// <summary>
        /// Initializes a new instance of the DockerImageResponse class.
        /// </summary>
        public DockerImageResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DockerImageResponse class.
        /// </summary>
        /// <param name="name">The image name.</param>
        /// <param name="imageRequestTypeDiscriminator">Property used by
        /// Swagger for polymorphic object generation.</param>
        /// <param name="id">The image id.</param>
        /// <param name="version">The image version.</param>
        /// <param name="description">The image description.</param>
        /// <param name="tags">Image tag list</param>
        /// <param name="kvTags">Image tag dictionary</param>
        /// <param name="properties">Image property dictionary</param>
        /// <param name="createdTime">Time image was created.</param>
        /// <param name="modifiedTime">Time image was last modified.</param>
        /// <param name="creationState">Possible values include: 'NotStarted',
        /// 'Running', 'Cancelled', 'Succeeded', 'Failed'</param>
        /// <param name="modelIds">The list of model Id's.</param>
        /// <param name="modelDetails">The list of models.</param>
        /// <param name="imageLocation">Image location string.</param>
        /// <param name="imageBuildLogUri">The Uri to the image build
        /// logs.</param>
        /// <param name="driverProgram">Name of the driver file.</param>
        /// <param name="assets">The list of assets.</param>
        /// <param name="dockerFileUri">The Uri to the docker file.</param>
        public DockerImageResponse(string name, string imageRequestTypeDiscriminator, string id = default(string), int? version = default(int?), string description = default(string), IList<string> tags = default(IList<string>), IDictionary<string, string> kvTags = default(IDictionary<string, string>), IDictionary<string, string> properties = default(IDictionary<string, string>), System.DateTime? createdTime = default(System.DateTime?), System.DateTime? modifiedTime = default(System.DateTime?), string imageType = default(string), string creationState = default(string), ErrorResponse error = default(ErrorResponse), IList<string> modelIds = default(IList<string>), IList<Model> modelDetails = default(IList<Model>), string imageLocation = default(string), string imageBuildLogUri = default(string), string driverProgram = default(string), IList<ImageAsset> assets = default(IList<ImageAsset>), TargetRuntime targetRuntime = default(TargetRuntime), string dockerFileUri = default(string))
            : base(name, imageRequestTypeDiscriminator, id, version, description, tags, kvTags, properties, createdTime, modifiedTime, imageType, creationState, error, modelIds, modelDetails, imageLocation, imageBuildLogUri)
        {
            DriverProgram = driverProgram;
            Assets = assets;
            TargetRuntime = targetRuntime;
            DockerFileUri = dockerFileUri;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the driver file.
        /// </summary>
        [JsonProperty(PropertyName = "driverProgram")]
        public string DriverProgram { get; set; }

        /// <summary>
        /// Gets or sets the list of assets.
        /// </summary>
        [JsonProperty(PropertyName = "assets")]
        public IList<ImageAsset> Assets { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "targetRuntime")]
        public TargetRuntime TargetRuntime { get; set; }

        /// <summary>
        /// Gets or sets the Uri to the docker file.
        /// </summary>
        [JsonProperty(PropertyName = "dockerFileUri")]
        public string DockerFileUri { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Assets != null)
            {
                foreach (var element in Assets)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
