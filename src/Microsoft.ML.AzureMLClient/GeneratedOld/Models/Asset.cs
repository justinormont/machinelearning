// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Asset
    {
        /// <summary>
        /// Initializes a new instance of the Asset class.
        /// </summary>
        public Asset()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Asset class.
        /// </summary>
        /// <param name="name">The asset name.</param>
        /// <param name="artifacts">List of artifacts.</param>
        /// <param name="id">The asset id.</param>
        /// <param name="description">The asset description.</param>
        /// <param name="tags">The list of asset tags.</param>
        /// <param name="runid">Run id of the asset.</param>
        /// <param name="projectid">Project id of the asset.</param>
        /// <param name="meta">Asset meta.</param>
        /// <param name="createdTime">Time asset was created.</param>
        public Asset(string name, IList<Artifact> artifacts, string id = default(string), string description = default(string), IList<string> tags = default(IList<string>), string runid = default(string), string projectid = default(string), IDictionary<string, string> meta = default(IDictionary<string, string>), System.DateTime? createdTime = default(System.DateTime?))
        {
            Id = id;
            Name = name;
            Description = description;
            Artifacts = artifacts;
            Tags = tags;
            Runid = runid;
            Projectid = projectid;
            Meta = meta;
            CreatedTime = createdTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the asset id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the asset name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the asset description.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets list of artifacts.
        /// </summary>
        [JsonProperty(PropertyName = "artifacts")]
        public IList<Artifact> Artifacts { get; set; }

        /// <summary>
        /// Gets or sets the list of asset tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<string> Tags { get; set; }

        /// <summary>
        /// Gets or sets run id of the asset.
        /// </summary>
        [JsonProperty(PropertyName = "runid")]
        public string Runid { get; set; }

        /// <summary>
        /// Gets or sets project id of the asset.
        /// </summary>
        [JsonProperty(PropertyName = "projectid")]
        public string Projectid { get; set; }

        /// <summary>
        /// Gets or sets asset meta.
        /// </summary>
        [JsonProperty(PropertyName = "meta")]
        public IDictionary<string, string> Meta { get; set; }

        /// <summary>
        /// Gets or sets time asset was created.
        /// </summary>
        [JsonProperty(PropertyName = "createdTime")]
        public System.DateTime? CreatedTime { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Artifacts == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Artifacts");
            }
        }
    }
}
