// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for ComputeType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(ComputeTypeConverter))]
    public struct ComputeType : System.IEquatable<ComputeType>
    {
        private ComputeType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly ComputeType AKS = "AKS";

        public static readonly ComputeType AmlCompute = "AmlCompute";

        public static readonly ComputeType DataFactory = "DataFactory";

        public static readonly ComputeType VirtualMachine = "VirtualMachine";

        public static readonly ComputeType HDInsight = "HDInsight";

        public static readonly ComputeType Databricks = "Databricks";

        public static readonly ComputeType DataLakeAnalytics = "DataLakeAnalytics";


        /// <summary>
        /// Underlying value of enum ComputeType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for ComputeType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type ComputeType
        /// </summary>
        public bool Equals(ComputeType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to ComputeType
        /// </summary>
        public static implicit operator ComputeType(string value)
        {
            return new ComputeType(value);
        }

        /// <summary>
        /// Implicit operator to convert ComputeType to string
        /// </summary>
        public static implicit operator string(ComputeType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum ComputeType
        /// </summary>
        public static bool operator == (ComputeType e1, ComputeType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum ComputeType
        /// </summary>
        public static bool operator != (ComputeType e1, ComputeType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for ComputeType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is ComputeType && Equals((ComputeType)obj);
        }

        /// <summary>
        /// Returns for hashCode ComputeType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
