// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Instance of an Azure Machine Learning Model
    /// </summary>
    public partial class Model
    {
        /// <summary>
        /// Initializes a new instance of the Model class.
        /// </summary>
        public Model()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Model class.
        /// </summary>
        /// <param name="name">The Model name</param>
        /// <param name="url">The URL of the Model. Usually we put a SAS URL
        /// here.</param>
        /// <param name="mimeType">The MIME type of Model content. For more
        /// details about MIME type, please open
        /// https://www.iana.org/assignments/media-types/media-types.xhtml</param>
        /// <param name="id">The Model Id</param>
        /// <param name="version">The Model version assigned by Model
        /// Management Service</param>
        /// <param name="tags">Model tag list</param>
        /// <param name="description">The Model description text</param>
        /// <param name="createdAt">The Model creation time as a
        /// DateTimeOffset</param>
        /// <param name="createdTime">The Model creation time (UTC)</param>
        /// <param name="unpack">Indicates whether we need to unpack the Model
        /// during docker Image creation.</param>
        public Model(string name, string url, string mimeType, string id = default(string), int? version = default(int?), IList<string> tags = default(IList<string>), string description = default(string), System.DateTime? createdAt = default(System.DateTime?), System.DateTime? createdTime = default(System.DateTime?), bool? unpack = default(bool?))
        {
            Id = id;
            Name = name;
            Version = version;
            Tags = tags;
            Url = url;
            MimeType = mimeType;
            Description = description;
            CreatedAt = createdAt;
            CreatedTime = createdTime;
            Unpack = unpack;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the Model Id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or sets the Model name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets the Model version assigned by Model Management Service
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public int? Version { get; private set; }

        /// <summary>
        /// Gets or sets model tag list
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<string> Tags { get; set; }

        /// <summary>
        /// Gets or sets the URL of the Model. Usually we put a SAS URL here.
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets the MIME type of Model content. For more details about
        /// MIME type, please open
        /// https://www.iana.org/assignments/media-types/media-types.xhtml
        /// </summary>
        [JsonProperty(PropertyName = "mimeType")]
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or sets the Model description text
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets the Model creation time as a DateTimeOffset
        /// </summary>
        [JsonProperty(PropertyName = "createdAt")]
        public System.DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// Gets the Model creation time (UTC)
        /// </summary>
        [JsonProperty(PropertyName = "createdTime")]
        public System.DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Gets or sets indicates whether we need to unpack the Model during
        /// docker Image creation.
        /// </summary>
        [JsonProperty(PropertyName = "unpack")]
        public bool? Unpack { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
            if (MimeType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MimeType");
            }
        }
    }
}
