// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ImageAsset
    {
        /// <summary>
        /// Initializes a new instance of the ImageAsset class.
        /// </summary>
        public ImageAsset()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImageAsset class.
        /// </summary>
        /// <param name="id">The image asset id.</param>
        /// <param name="mimeType">The image asset mimetype.</param>
        /// <param name="url">The image asset URL.</param>
        /// <param name="unpack">Option to unpack.</param>
        public ImageAsset(string id, string mimeType, string url, bool? unpack = default(bool?))
        {
            Id = id;
            MimeType = mimeType;
            Url = url;
            Unpack = unpack;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the image asset id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the image asset mimetype.
        /// </summary>
        [JsonProperty(PropertyName = "mimeType")]
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or sets the image asset URL.
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets option to unpack.
        /// </summary>
        [JsonProperty(PropertyName = "unpack")]
        public bool? Unpack { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (MimeType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MimeType");
            }
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
        }
    }
}
