// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ServingContainerInferenceConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ServingContainerInferenceConfiguration class.
        /// </summary>
        public ServingContainerInferenceConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ServingContainerInferenceConfiguration class.
        /// </summary>
        public ServingContainerInferenceConfiguration(string name = default(string), string imageLocation = default(string), int? internalPort = default(int?), string workingDirectory = default(string), string defaultScoringPath = default(string), string healthPath = default(string), IList<string> runCommandWithParameters = default(IList<string>), bool? gpuRequired = default(bool?), string swaggerPath = default(string), IList<string> modelIds = default(IList<string>), RegistryInfo imageRegistryInfo = default(RegistryInfo))
        {
            Name = name;
            ImageLocation = imageLocation;
            InternalPort = internalPort;
            WorkingDirectory = workingDirectory;
            DefaultScoringPath = defaultScoringPath;
            HealthPath = healthPath;
            RunCommandWithParameters = runCommandWithParameters;
            GpuRequired = gpuRequired;
            SwaggerPath = swaggerPath;
            ModelIds = modelIds;
            ImageRegistryInfo = imageRegistryInfo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "imageLocation")]
        public string ImageLocation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "internalPort")]
        public int? InternalPort { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "workingDirectory")]
        public string WorkingDirectory { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "defaultScoringPath")]
        public string DefaultScoringPath { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "healthPath")]
        public string HealthPath { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "runCommandWithParameters")]
        public IList<string> RunCommandWithParameters { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gpuRequired")]
        public bool? GpuRequired { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "swaggerPath")]
        public string SwaggerPath { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modelIds")]
        public IList<string> ModelIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "imageRegistryInfo")]
        public RegistryInfo ImageRegistryInfo { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ImageRegistryInfo != null)
            {
                ImageRegistryInfo.Validate();
            }
        }
    }
}
