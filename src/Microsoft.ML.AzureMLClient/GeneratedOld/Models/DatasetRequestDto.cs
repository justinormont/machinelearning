// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DatasetRequestDto
    {
        /// <summary>
        /// Initializes a new instance of the DatasetRequestDto class.
        /// </summary>
        public DatasetRequestDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatasetRequestDto class.
        /// </summary>
        public DatasetRequestDto(DataPathDto dataPath = default(DataPathDto), ExcelSection excel = default(ExcelSection), JsonSection json = default(JsonSection), GeneralSection general = default(GeneralSection), DataSourceProperties sourceProperties = default(DataSourceProperties), IList<string> columnsToRemove = default(IList<string>), IList<ColumnType> schema = default(IList<ColumnType>), string notes = default(string), string name = default(string), string description = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), bool? isVisible = default(bool?), string defaultCompute = default(string))
        {
            DataPath = dataPath;
            Excel = excel;
            Json = json;
            General = general;
            SourceProperties = sourceProperties;
            ColumnsToRemove = columnsToRemove;
            Schema = schema;
            Notes = notes;
            Name = name;
            Description = description;
            Tags = tags;
            IsVisible = isVisible;
            DefaultCompute = defaultCompute;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dataPath")]
        public DataPathDto DataPath { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "excel")]
        public ExcelSection Excel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "json")]
        public JsonSection Json { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "general")]
        public GeneralSection General { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceProperties")]
        public DataSourceProperties SourceProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "columnsToRemove")]
        public IList<string> ColumnsToRemove { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "schema")]
        public IList<ColumnType> Schema { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "notes")]
        public string Notes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isVisible")]
        public bool? IsVisible { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "defaultCompute")]
        public string DefaultCompute { get; set; }

    }
}
