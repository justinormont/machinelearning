// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Snapshot operations.
    /// </summary>
    public partial interface ISnapshot
    {
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='snapshotId'>
        /// </param>
        /// <param name='projectName'>
        /// </param>
        /// <param name='accountName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<string>> GetSnapshotFilesZipSasWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid snapshotId, string projectName = default(string), string accountName = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='snapshotId'>
        /// </param>
        /// <param name='projectName'>
        /// </param>
        /// <param name='parentSnapshotId'>
        /// </param>
        /// <param name='files'>
        /// </param>
        /// <param name='accountName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> CreateSnapshotWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid snapshotId, string projectName = default(string), System.Guid? parentSnapshotId = default(System.Guid?), IList<object> files = default(IList<object>), string accountName = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='snapshotId'>
        /// </param>
        /// <param name='projectName'>
        /// </param>
        /// <param name='deleteLatestSnapshotPointer'>
        /// </param>
        /// <param name='accountName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteSnapshotAndLastestPointerWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid snapshotId, string projectName = default(string), bool? deleteLatestSnapshotPointer = default(bool?), string accountName = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='snapshotId'>
        /// </param>
        /// <param name='projectName'>
        /// </param>
        /// <param name='accountName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<string>> GetSnapshotFilesZipLocationWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid snapshotId, string projectName = default(string), string accountName = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='snapshotId'>
        /// </param>
        /// <param name='projectName'>
        /// </param>
        /// <param name='accountName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DirTreeNode>> GetSasUrlsWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid snapshotId, string projectName = default(string), string accountName = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='snapshotId'>
        /// </param>
        /// <param name='projectName'>
        /// </param>
        /// <param name='accountName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DirTreeNode>> GetStorageUrlsWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid snapshotId, string projectName = default(string), string accountName = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='projectName'>
        /// </param>
        /// <param name='accountName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SnapshotDto>> GetLatestSnapshotWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, string projectName = default(string), string accountName = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='fileList'>
        /// </param>
        /// <param name='projectName'>
        /// </param>
        /// <param name='parentSnapshotId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<MerkleDiffEntry>>> SnapshotDiffConstructionWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, FlatDirTreeNodeListDto fileList, string projectName = default(string), System.Guid? parentSnapshotId = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='projectName'>
        /// </param>
        /// <param name='snapshotId1'>
        /// </param>
        /// <param name='snapshotId2'>
        /// </param>
        /// <param name='accountName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<MerkleDiffEntry>>> GetSnapshotDiffWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, string projectName = default(string), System.Guid? snapshotId1 = default(System.Guid?), System.Guid? snapshotId2 = default(System.Guid?), string accountName = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='snapshotId'>
        /// </param>
        /// <param name='projectName'>
        /// </param>
        /// <param name='accountName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SnapshotDto>> GetSnapshotMetadataWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid snapshotId, string projectName = default(string), string accountName = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// alive
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> PingWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// alive
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> AliveWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// version
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<MetaApiVersionResponse>> GetServiceVersionMetadataWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
