// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RunArtifact.
    /// </summary>
    public static partial class RunArtifactExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            public static PaginatedArtifactDto ListInContainer(this IRunArtifact operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string continuationToken = default(string))
            {
                return operations.ListInContainerAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, continuationToken).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedArtifactDto> ListInContainerAsync(this IRunArtifact operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInContainerWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='path'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            public static PaginatedArtifactDto ListInPath(this IRunArtifact operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path, string continuationToken = default(string))
            {
                return operations.ListInPathAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path, continuationToken).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='path'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedArtifactDto> ListInPathAsync(this IRunArtifact operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path, string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInPathWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='path'>
            /// </param>
            public static ArtifactContentInformationDto GetContentInformation(this IRunArtifact operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path)
            {
                return operations.GetContentInformationAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='path'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ArtifactContentInformationDto> GetContentInformationAsync(this IRunArtifact operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContentInformationWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='path'>
            /// </param>
            public static string GetSasUri(this IRunArtifact operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path)
            {
                return operations.GetSasUriAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='path'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetSasUriAsync(this IRunArtifact operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSasUriWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='path'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            public static PaginatedArtifactContentInformationDto ListSasByPrefix(this IRunArtifact operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path, string continuationToken = default(string))
            {
                return operations.ListSasByPrefixAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path, continuationToken).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='path'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedArtifactContentInformationDto> ListSasByPrefixAsync(this IRunArtifact operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path, string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSasByPrefixWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='command'>
            /// </param>
            public static BatchArtifactContentInformationDto BatchCreateEmptyArtifacts(this IRunArtifact operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, BatchArtifactCreateCommand command = default(BatchArtifactCreateCommand))
            {
                return operations.BatchCreateEmptyArtifactsAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, command).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BatchArtifactContentInformationDto> BatchCreateEmptyArtifactsAsync(this IRunArtifact operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, BatchArtifactCreateCommand command = default(BatchArtifactCreateCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchCreateEmptyArtifactsWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, command, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
