// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Run.
    /// </summary>
    public static partial class RunExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='orderby'>
            /// </param>
            /// <param name='sortorder'>
            /// Possible values include: 'Asc', 'Desc'
            /// </param>
            /// <param name='top'>
            /// </param>
            public static PaginatedRunDto GetChild(this IRun operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string filter = default(string), string continuationToken = default(string), IList<string> orderby = default(IList<string>), string sortorder = default(string), int? top = default(int?))
            {
                return operations.GetChildAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, filter, continuationToken, orderby, sortorder, top).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='orderby'>
            /// </param>
            /// <param name='sortorder'>
            /// Possible values include: 'Asc', 'Desc'
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedRunDto> GetChildAsync(this IRun operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string filter = default(string), string continuationToken = default(string), IList<string> orderby = default(IList<string>), string sortorder = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChildWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, filter, continuationToken, orderby, sortorder, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            public static TokenResult GetToken(this IRun operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId)
            {
                return operations.GetTokenAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TokenResult> GetTokenAsync(this IRun operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTokenWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            public static RunDetailsDto GetDetails(this IRun operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId)
            {
                return operations.GetDetailsAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RunDetailsDto> GetDetailsAsync(this IRun operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDetailsWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            public static RunDto Get(this IRun operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId)
            {
                return operations.GetAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RunDto> GetAsync(this IRun operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='createRunDto'>
            /// </param>
            public static RunDto Patch(this IRun operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, CreateRunDto createRunDto = default(CreateRunDto))
            {
                return operations.PatchAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, createRunDto).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='createRunDto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RunDto> PatchAsync(this IRun operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, CreateRunDto createRunDto = default(CreateRunDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, createRunDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='requestDto'>
            /// </param>
            public static BatchAddOrModifyRunResultDto BatchAddOrModify(this IRun operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, BatchAddOrModifyRunRequestDto requestDto)
            {
                return operations.BatchAddOrModifyAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, requestDto).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='requestDto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BatchAddOrModifyRunResultDto> BatchAddOrModifyAsync(this IRun operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, BatchAddOrModifyRunRequestDto requestDto, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchAddOrModifyWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, requestDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='orderby'>
            /// </param>
            /// <param name='sortorder'>
            /// Possible values include: 'Asc', 'Desc'
            /// </param>
            /// <param name='top'>
            /// </param>
            public static PaginatedRunDto List(this IRun operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string filter = default(string), string continuationToken = default(string), IList<string> orderby = default(IList<string>), string sortorder = default(string), int? top = default(int?))
            {
                return operations.ListAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, filter, continuationToken, orderby, sortorder, top).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='orderby'>
            /// </param>
            /// <param name='sortorder'>
            /// Possible values include: 'Asc', 'Desc'
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedRunDto> ListAsync(this IRun operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string filter = default(string), string continuationToken = default(string), IList<string> orderby = default(IList<string>), string sortorder = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, filter, continuationToken, orderby, sortorder, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='orderby'>
            /// </param>
            /// <param name='sortorder'>
            /// Possible values include: 'Asc', 'Desc'
            /// </param>
            /// <param name='top'>
            /// </param>
            public static RunCountsDto GetCounts(this IRun operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string filter = default(string), string continuationToken = default(string), IList<string> orderby = default(IList<string>), string sortorder = default(string), int? top = default(int?))
            {
                return operations.GetCountsAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, filter, continuationToken, orderby, sortorder, top).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='orderby'>
            /// </param>
            /// <param name='sortorder'>
            /// Possible values include: 'Asc', 'Desc'
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RunCountsDto> GetCountsAsync(this IRun operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string filter = default(string), string continuationToken = default(string), IList<string> orderby = default(IList<string>), string sortorder = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCountsWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, filter, continuationToken, orderby, sortorder, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
