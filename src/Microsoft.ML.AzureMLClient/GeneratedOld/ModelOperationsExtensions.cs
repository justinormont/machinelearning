// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ModelOperations.
    /// </summary>
    public static partial class ModelOperationsExtensions
    {
            /// <summary>
            /// Register a Model
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='model'>
            /// The payload that is used to register a Model.
            /// </param>
            public static Model Register(this IModelOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspace, Model model)
            {
                return operations.RegisterAsync(subscriptionId, resourceGroupName, workspace, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register a Model
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='model'>
            /// The payload that is used to register a Model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Model> RegisterAsync(this IModelOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspace, Model model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspace, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query the list of Models in a workspace. The result list can be filtered
            /// using tag and name. If no filter is passed, the query lists all the Models
            /// in the given workspace. The returned list is paginated and the count of
            /// item in each page is an optional parameter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='name'>
            /// The object name.
            /// </param>
            /// <param name='tag'>
            /// The object tag.
            /// </param>
            /// <param name='version'>
            /// The object version.
            /// </param>
            /// <param name='count'>
            /// The number of items to retrieve in a page
            /// </param>
            /// <param name='skipToken'>
            /// The continuation token to retrieve the next page
            /// </param>
            /// <param name='orderBy'>
            /// The option to order response. Possible values include: 'CreatedAtDesc',
            /// 'CreatedAtAsc', 'UpdatedAtDesc', 'UpdatedAtAsc'
            /// </param>
            public static PaginatedModelList ListQuery(this IModelOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspace, string name = default(string), string tag = default(string), string version = default(string), string count = default(string), string skipToken = default(string), string orderBy = default(string))
            {
                return operations.ListQueryAsync(subscriptionId, resourceGroupName, workspace, name, tag, version, count, skipToken, orderBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query the list of Models in a workspace. The result list can be filtered
            /// using tag and name. If no filter is passed, the query lists all the Models
            /// in the given workspace. The returned list is paginated and the count of
            /// item in each page is an optional parameter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='name'>
            /// The object name.
            /// </param>
            /// <param name='tag'>
            /// The object tag.
            /// </param>
            /// <param name='version'>
            /// The object version.
            /// </param>
            /// <param name='count'>
            /// The number of items to retrieve in a page
            /// </param>
            /// <param name='skipToken'>
            /// The continuation token to retrieve the next page
            /// </param>
            /// <param name='orderBy'>
            /// The option to order response. Possible values include: 'CreatedAtDesc',
            /// 'CreatedAtAsc', 'UpdatedAtDesc', 'UpdatedAtAsc'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedModelList> ListQueryAsync(this IModelOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspace, string name = default(string), string tag = default(string), string version = default(string), string count = default(string), string skipToken = default(string), string orderBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspace, name, tag, version, count, skipToken, orderBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch a specific model
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The object id.
            /// </param>
            /// <param name='patch'>
            /// The payload that is used to patch an Model.
            /// </param>
            public static Model Patch(this IModelOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspace, string id, IList<JsonPatchOperation> patch)
            {
                return operations.PatchAsync(subscriptionId, resourceGroupName, workspace, id, patch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch a specific model
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The object id.
            /// </param>
            /// <param name='patch'>
            /// The payload that is used to patch an Model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Model> PatchAsync(this IModelOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspace, string id, IList<JsonPatchOperation> patch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspace, id, patch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets Model by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The object id.
            /// </param>
            public static Model QueryById(this IModelOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspace, string id)
            {
                return operations.QueryByIdAsync(subscriptionId, resourceGroupName, workspace, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets Model by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The object id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Model> QueryByIdAsync(this IModelOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspace, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryByIdWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspace, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified Model
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The object id.
            /// </param>
            public static void Delete(this IModelOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspace, string id)
            {
                operations.DeleteAsync(subscriptionId, resourceGroupName, workspace, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified Model
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The object id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IModelOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspace, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspace, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
