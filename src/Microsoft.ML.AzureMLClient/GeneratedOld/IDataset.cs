// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Dataset operations.
    /// </summary>
    public partial interface IDataset
    {
        /// <summary>
        /// List
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='continuationToken'>
        /// </param>
        /// <param name='count'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PaginatedResultActionDto>> ListActionsWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string continuationToken = default(string), int? count = 30, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Submit
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ActionDto>> SubmitActionWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, ActionRequestDto request = default(ActionRequestDto), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// DeleteActions
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteActionsWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// GetResult
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ActionResultDto>> GetActionResultWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, ActionRequestDto request = default(ActionRequestDto), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='actionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ActionDto>> GetActionByIdWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, System.Guid actionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Cancel
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='actionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> CancelActionByIdWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, System.Guid actionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// UpdateResult
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='actionId'>
        /// </param>
        /// <param name='resultUpdateDto'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateActionResultWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, System.Guid actionId, ActionResultUpdateDto resultUpdateDto = default(ActionResultUpdateDto), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='version'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DatasetDefinitionDto>> GetDatasetDefinitionWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string version, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='version'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DataPathDto>> GetDataPathWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string version, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='version'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DataViewSetResult>> GetDatasetPreviewWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string version, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='continuationToken'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PaginatedResultDatasetDefinitionDto>> GetAllDatasetDefinitionsWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string continuationToken = default(string), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// UpdateDefinition
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='newDefinition'>
        /// </param>
        /// <param name='registerAsPending'>
        /// </param>
        /// <param name='forceUpdate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DatasetDto>> UpdateDefinitionWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, DatasetDefinitionDto newDefinition = default(DatasetDefinitionDto), bool? registerAsPending = false, bool? forceUpdate = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='includeLatestDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DatasetDto>> GetDatasetByIdWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, bool? includeLatestDefinition = true, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='newDatasetDto'>
        /// </param>
        /// <param name='forceUpdate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DatasetDto>> UpdateDatasetWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, DatasetDto newDatasetDto = default(DatasetDto), bool? forceUpdate = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetName'>
        /// </param>
        /// <param name='includeLatestDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DatasetDto>> GetDatasetByNameWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, string datasetName, bool? includeLatestDefinition = true, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetNames'>
        /// </param>
        /// <param name='searchText'>
        /// </param>
        /// <param name='includeInvisible'>
        /// </param>
        /// <param name='status'>
        /// </param>
        /// <param name='continuationToken'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='includeLatestDefinition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PaginatedResultDatasetDto>> ListWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, IList<string> datasetNames = default(IList<string>), string searchText = default(string), bool? includeInvisible = false, string status = default(string), string continuationToken = default(string), int? pageSize = default(int?), bool? includeLatestDefinition = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Register
        /// </summary>
        /// <remarks>
        /// Register new Dataset
        /// </remarks>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetDto'>
        /// </param>
        /// <param name='registerAsPending'>
        /// </param>
        /// <param name='ifExistsOk'>
        /// </param>
        /// <param name='updateDefinitionIfExists'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DatasetDto>> RegisterWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, DatasetDto datasetDto = default(DatasetDto), bool? registerAsPending = false, bool? ifExistsOk = true, bool? updateDefinitionIfExists = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteAllDatasetsWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='registerAsPending'>
        /// </param>
        /// <param name='ifExistsOK'>
        /// </param>
        /// <param name='updateDefinitionIfExists'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DatasetDto>> RegisterFromDataPathWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, DatasetRequestDto request = default(DatasetRequestDto), bool? registerAsPending = false, bool? ifExistsOK = true, bool? updateDefinitionIfExists = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Register new Dataset by uploading files to default or given
        /// Datastore.
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='registerAsPending'>
        /// </param>
        /// <param name='ifExistsOK'>
        /// </param>
        /// <param name='updateDefinitionIfExists'>
        /// </param>
        /// <param name='datasetName'>
        /// </param>
        /// <param name='description'>
        /// </param>
        /// <param name='files'>
        /// </param>
        /// <param name='datastoreName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DatasetDto>> RegisterFromUploadWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, bool? registerAsPending = false, bool? ifExistsOK = true, bool? updateDefinitionIfExists = false, string datasetName = default(string), string description = default(string), IList<object> files = default(IList<object>), string datastoreName = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='versionId'>
        /// </param>
        /// <param name='newDefinition'>
        /// </param>
        /// <param name='forceUpdate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DatasetDto>> UpdatePendingDefinitionWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string versionId, DatasetDefinitionDto newDefinition = default(DatasetDefinitionDto), bool? forceUpdate = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='version'>
        /// </param>
        /// <param name='newState'>
        /// </param>
        /// <param name='forceUpdate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateDefinitionStateWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string version, DatasetStateDto newState = default(DatasetStateDto), bool? forceUpdate = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='newState'>
        /// </param>
        /// <param name='forceUpdate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateDatasetStateWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, DatasetStateDto newState = default(DatasetStateDto), bool? forceUpdate = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteDatasetWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DatasetModelRegistrationsDto>> GetDatasetModelsWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='modelRegistration'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> PostModelRegistrationWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, ModelRegistrationDto modelRegistration = default(ModelRegistrationDto), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='versionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ProfileActionResultDto>> GetProfileWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string versionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='versionId'>
        /// </param>
        /// <param name='computeTarget'>
        /// </param>
        /// <param name='generatePreview'>
        /// </param>
        /// <param name='rowCount'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> GenerateProfileWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string versionId, string computeTarget = default(string), bool? generatePreview = false, int? rowCount = 1000, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// GetAllDatasetSnapshots
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='continuationToken'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PaginatedResultDatasetSnapshotDto>> GetAllDatasetSnapshotsWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string continuationToken = default(string), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// CreateDatasetSnapshot
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='ifExistsOk'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DatasetSnapshotDto>> CreateDatasetSnapshotWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, DatasetSnapshotRequestDto request = default(DatasetSnapshotRequestDto), bool? ifExistsOk = true, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// GetDatasetSnapshot
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='datasetSnapshotName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<DatasetSnapshotDto>> GetDatasetSnapshotWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string datasetSnapshotName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// DeleteDatasetSnapshot
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='datasetSnapshotName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteDatasetSnapshotWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string datasetSnapshotName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// alive
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> PingWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// alive
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> Ping1WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// version
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<MetaApiVersionResponse>> GetServiceVersionMetadataWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
