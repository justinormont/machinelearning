// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Dataset.
    /// </summary>
    public static partial class DatasetExtensions
    {
            /// <summary>
            /// List
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='count'>
            /// </param>
            public static PaginatedResultActionDto ListActions(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string continuationToken = default(string), int? count = 30)
            {
                return operations.ListActionsAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, continuationToken, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedResultActionDto> ListActionsAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string continuationToken = default(string), int? count = 30, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListActionsWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, continuationToken, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submit
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static ActionDto SubmitAction(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, ActionRequestDto request = default(ActionRequestDto))
            {
                return operations.SubmitActionAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submit
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActionDto> SubmitActionAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, ActionRequestDto request = default(ActionRequestDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SubmitActionWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// DeleteActions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            public static void DeleteActions(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId)
            {
                operations.DeleteActionsAsync(subscriptionId, resourceGroupName, workspaceName, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// DeleteActions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteActionsAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteActionsWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// GetResult
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static ActionResultDto GetActionResult(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, ActionRequestDto request = default(ActionRequestDto))
            {
                return operations.GetActionResultAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetResult
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActionResultDto> GetActionResultAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, ActionRequestDto request = default(ActionRequestDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActionResultWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='actionId'>
            /// </param>
            public static ActionDto GetActionById(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, System.Guid actionId)
            {
                return operations.GetActionByIdAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, actionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='actionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActionDto> GetActionByIdAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, System.Guid actionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActionByIdWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, actionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='actionId'>
            /// </param>
            public static void CancelActionById(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, System.Guid actionId)
            {
                operations.CancelActionByIdAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, actionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='actionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelActionByIdAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, System.Guid actionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelActionByIdWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, actionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// UpdateResult
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='actionId'>
            /// </param>
            /// <param name='resultUpdateDto'>
            /// </param>
            public static void UpdateActionResult(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, System.Guid actionId, ActionResultUpdateDto resultUpdateDto = default(ActionResultUpdateDto))
            {
                operations.UpdateActionResultAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, actionId, resultUpdateDto).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UpdateResult
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='actionId'>
            /// </param>
            /// <param name='resultUpdateDto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateActionResultAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, System.Guid actionId, ActionResultUpdateDto resultUpdateDto = default(ActionResultUpdateDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateActionResultWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, actionId, resultUpdateDto, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static DatasetDefinitionDto GetDatasetDefinition(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string version)
            {
                return operations.GetDatasetDefinitionAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetDefinitionDto> GetDatasetDefinitionAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetDefinitionWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static DataPathDto GetDataPath(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string version)
            {
                return operations.GetDataPathAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataPathDto> GetDataPathAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataPathWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static DataViewSetResult GetDatasetPreview(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string version)
            {
                return operations.GetDatasetPreviewAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataViewSetResult> GetDatasetPreviewAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetPreviewWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static PaginatedResultDatasetDefinitionDto GetAllDatasetDefinitions(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string continuationToken = default(string), int? pageSize = default(int?))
            {
                return operations.GetAllDatasetDefinitionsAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, continuationToken, pageSize).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedResultDatasetDefinitionDto> GetAllDatasetDefinitionsAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string continuationToken = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllDatasetDefinitionsWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, continuationToken, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UpdateDefinition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='newDefinition'>
            /// </param>
            /// <param name='registerAsPending'>
            /// </param>
            /// <param name='forceUpdate'>
            /// </param>
            public static DatasetDto UpdateDefinition(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, DatasetDefinitionDto newDefinition = default(DatasetDefinitionDto), bool? registerAsPending = false, bool? forceUpdate = false)
            {
                return operations.UpdateDefinitionAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, newDefinition, registerAsPending, forceUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UpdateDefinition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='newDefinition'>
            /// </param>
            /// <param name='registerAsPending'>
            /// </param>
            /// <param name='forceUpdate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetDto> UpdateDefinitionAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, DatasetDefinitionDto newDefinition = default(DatasetDefinitionDto), bool? registerAsPending = false, bool? forceUpdate = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDefinitionWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, newDefinition, registerAsPending, forceUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='includeLatestDefinition'>
            /// </param>
            public static DatasetDto GetDatasetById(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, bool? includeLatestDefinition = true)
            {
                return operations.GetDatasetByIdAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, includeLatestDefinition).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='includeLatestDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetDto> GetDatasetByIdAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, bool? includeLatestDefinition = true, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetByIdWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, includeLatestDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='newDatasetDto'>
            /// </param>
            /// <param name='forceUpdate'>
            /// </param>
            public static DatasetDto UpdateDataset(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, DatasetDto newDatasetDto = default(DatasetDto), bool? forceUpdate = false)
            {
                return operations.UpdateDatasetAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, newDatasetDto, forceUpdate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='newDatasetDto'>
            /// </param>
            /// <param name='forceUpdate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetDto> UpdateDatasetAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, DatasetDto newDatasetDto = default(DatasetDto), bool? forceUpdate = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDatasetWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, newDatasetDto, forceUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetName'>
            /// </param>
            /// <param name='includeLatestDefinition'>
            /// </param>
            public static DatasetDto GetDatasetByName(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string datasetName, bool? includeLatestDefinition = true)
            {
                return operations.GetDatasetByNameAsync(subscriptionId, resourceGroupName, workspaceName, datasetName, includeLatestDefinition).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetName'>
            /// </param>
            /// <param name='includeLatestDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetDto> GetDatasetByNameAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string datasetName, bool? includeLatestDefinition = true, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetByNameWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetName, includeLatestDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetNames'>
            /// </param>
            /// <param name='searchText'>
            /// </param>
            /// <param name='includeInvisible'>
            /// </param>
            /// <param name='status'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='includeLatestDefinition'>
            /// </param>
            public static PaginatedResultDatasetDto List(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, IList<string> datasetNames = default(IList<string>), string searchText = default(string), bool? includeInvisible = false, string status = default(string), string continuationToken = default(string), int? pageSize = default(int?), bool? includeLatestDefinition = false)
            {
                return operations.ListAsync(subscriptionId, resourceGroupName, workspaceName, datasetNames, searchText, includeInvisible, status, continuationToken, pageSize, includeLatestDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetNames'>
            /// </param>
            /// <param name='searchText'>
            /// </param>
            /// <param name='includeInvisible'>
            /// </param>
            /// <param name='status'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='includeLatestDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedResultDatasetDto> ListAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, IList<string> datasetNames = default(IList<string>), string searchText = default(string), bool? includeInvisible = false, string status = default(string), string continuationToken = default(string), int? pageSize = default(int?), bool? includeLatestDefinition = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetNames, searchText, includeInvisible, status, continuationToken, pageSize, includeLatestDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Register
            /// </summary>
            /// <remarks>
            /// Register new Dataset
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetDto'>
            /// </param>
            /// <param name='registerAsPending'>
            /// </param>
            /// <param name='ifExistsOk'>
            /// </param>
            /// <param name='updateDefinitionIfExists'>
            /// </param>
            public static DatasetDto Register(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, DatasetDto datasetDto = default(DatasetDto), bool? registerAsPending = false, bool? ifExistsOk = true, bool? updateDefinitionIfExists = false)
            {
                return operations.RegisterAsync(subscriptionId, resourceGroupName, workspaceName, datasetDto, registerAsPending, ifExistsOk, updateDefinitionIfExists).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register
            /// </summary>
            /// <remarks>
            /// Register new Dataset
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetDto'>
            /// </param>
            /// <param name='registerAsPending'>
            /// </param>
            /// <param name='ifExistsOk'>
            /// </param>
            /// <param name='updateDefinitionIfExists'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetDto> RegisterAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, DatasetDto datasetDto = default(DatasetDto), bool? registerAsPending = false, bool? ifExistsOk = true, bool? updateDefinitionIfExists = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetDto, registerAsPending, ifExistsOk, updateDefinitionIfExists, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            public static void DeleteAllDatasets(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName)
            {
                operations.DeleteAllDatasetsAsync(subscriptionId, resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAllDatasetsAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAllDatasetsWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='registerAsPending'>
            /// </param>
            /// <param name='ifExistsOK'>
            /// </param>
            /// <param name='updateDefinitionIfExists'>
            /// </param>
            public static DatasetDto RegisterFromDataPath(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, DatasetRequestDto request = default(DatasetRequestDto), bool? registerAsPending = false, bool? ifExistsOK = true, bool? updateDefinitionIfExists = false)
            {
                return operations.RegisterFromDataPathAsync(subscriptionId, resourceGroupName, workspaceName, request, registerAsPending, ifExistsOK, updateDefinitionIfExists).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='registerAsPending'>
            /// </param>
            /// <param name='ifExistsOK'>
            /// </param>
            /// <param name='updateDefinitionIfExists'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetDto> RegisterFromDataPathAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, DatasetRequestDto request = default(DatasetRequestDto), bool? registerAsPending = false, bool? ifExistsOK = true, bool? updateDefinitionIfExists = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterFromDataPathWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, request, registerAsPending, ifExistsOK, updateDefinitionIfExists, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Register new Dataset by uploading files to default or given Datastore.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='registerAsPending'>
            /// </param>
            /// <param name='ifExistsOK'>
            /// </param>
            /// <param name='updateDefinitionIfExists'>
            /// </param>
            /// <param name='datasetName'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='files'>
            /// </param>
            /// <param name='datastoreName'>
            /// </param>
            public static DatasetDto RegisterFromUpload(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, bool? registerAsPending = false, bool? ifExistsOK = true, bool? updateDefinitionIfExists = false, string datasetName = default(string), string description = default(string), IList<object> files = default(IList<object>), string datastoreName = default(string))
            {
                return operations.RegisterFromUploadAsync(subscriptionId, resourceGroupName, workspaceName, registerAsPending, ifExistsOK, updateDefinitionIfExists, datasetName, description, files, datastoreName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register new Dataset by uploading files to default or given Datastore.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='registerAsPending'>
            /// </param>
            /// <param name='ifExistsOK'>
            /// </param>
            /// <param name='updateDefinitionIfExists'>
            /// </param>
            /// <param name='datasetName'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='files'>
            /// </param>
            /// <param name='datastoreName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetDto> RegisterFromUploadAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, bool? registerAsPending = false, bool? ifExistsOK = true, bool? updateDefinitionIfExists = false, string datasetName = default(string), string description = default(string), IList<object> files = default(IList<object>), string datastoreName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterFromUploadWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, registerAsPending, ifExistsOK, updateDefinitionIfExists, datasetName, description, files, datastoreName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='versionId'>
            /// </param>
            /// <param name='newDefinition'>
            /// </param>
            /// <param name='forceUpdate'>
            /// </param>
            public static DatasetDto UpdatePendingDefinition(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string versionId, DatasetDefinitionDto newDefinition = default(DatasetDefinitionDto), bool? forceUpdate = false)
            {
                return operations.UpdatePendingDefinitionAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, versionId, newDefinition, forceUpdate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='versionId'>
            /// </param>
            /// <param name='newDefinition'>
            /// </param>
            /// <param name='forceUpdate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetDto> UpdatePendingDefinitionAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string versionId, DatasetDefinitionDto newDefinition = default(DatasetDefinitionDto), bool? forceUpdate = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePendingDefinitionWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, versionId, newDefinition, forceUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='newState'>
            /// </param>
            /// <param name='forceUpdate'>
            /// </param>
            public static void UpdateDefinitionState(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string version, DatasetStateDto newState = default(DatasetStateDto), bool? forceUpdate = false)
            {
                operations.UpdateDefinitionStateAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, version, newState, forceUpdate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='newState'>
            /// </param>
            /// <param name='forceUpdate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDefinitionStateAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string version, DatasetStateDto newState = default(DatasetStateDto), bool? forceUpdate = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDefinitionStateWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, version, newState, forceUpdate, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='newState'>
            /// </param>
            /// <param name='forceUpdate'>
            /// </param>
            public static void UpdateDatasetState(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, DatasetStateDto newState = default(DatasetStateDto), bool? forceUpdate = false)
            {
                operations.UpdateDatasetStateAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, newState, forceUpdate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='newState'>
            /// </param>
            /// <param name='forceUpdate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDatasetStateAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, DatasetStateDto newState = default(DatasetStateDto), bool? forceUpdate = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDatasetStateWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, newState, forceUpdate, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static void DeleteDataset(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string name)
            {
                operations.DeleteDatasetAsync(subscriptionId, resourceGroupName, workspaceName, name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDatasetAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDatasetWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            public static DatasetModelRegistrationsDto GetDatasetModels(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId)
            {
                return operations.GetDatasetModelsAsync(subscriptionId, resourceGroupName, workspaceName, datasetId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetModelRegistrationsDto> GetDatasetModelsAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetModelsWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='modelRegistration'>
            /// </param>
            public static void PostModelRegistration(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, ModelRegistrationDto modelRegistration = default(ModelRegistrationDto))
            {
                operations.PostModelRegistrationAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, modelRegistration).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='modelRegistration'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostModelRegistrationAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, ModelRegistrationDto modelRegistration = default(ModelRegistrationDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostModelRegistrationWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, modelRegistration, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='versionId'>
            /// </param>
            public static ProfileActionResultDto GetProfile(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string versionId)
            {
                return operations.GetProfileAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, versionId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='versionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfileActionResultDto> GetProfileAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string versionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProfileWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, versionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='versionId'>
            /// </param>
            /// <param name='computeTarget'>
            /// </param>
            /// <param name='generatePreview'>
            /// </param>
            /// <param name='rowCount'>
            /// </param>
            public static void GenerateProfile(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string versionId, string computeTarget = default(string), bool? generatePreview = false, int? rowCount = 1000)
            {
                operations.GenerateProfileAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, versionId, computeTarget, generatePreview, rowCount).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='versionId'>
            /// </param>
            /// <param name='computeTarget'>
            /// </param>
            /// <param name='generatePreview'>
            /// </param>
            /// <param name='rowCount'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GenerateProfileAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string versionId, string computeTarget = default(string), bool? generatePreview = false, int? rowCount = 1000, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GenerateProfileWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, versionId, computeTarget, generatePreview, rowCount, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// GetAllDatasetSnapshots
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static PaginatedResultDatasetSnapshotDto GetAllDatasetSnapshots(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string continuationToken = default(string), int? pageSize = default(int?))
            {
                return operations.GetAllDatasetSnapshotsAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, continuationToken, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetAllDatasetSnapshots
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedResultDatasetSnapshotDto> GetAllDatasetSnapshotsAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string continuationToken = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllDatasetSnapshotsWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, continuationToken, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// CreateDatasetSnapshot
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='ifExistsOk'>
            /// </param>
            public static DatasetSnapshotDto CreateDatasetSnapshot(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, DatasetSnapshotRequestDto request = default(DatasetSnapshotRequestDto), bool? ifExistsOk = true)
            {
                return operations.CreateDatasetSnapshotAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, request, ifExistsOk).GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateDatasetSnapshot
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='ifExistsOk'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetSnapshotDto> CreateDatasetSnapshotAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, DatasetSnapshotRequestDto request = default(DatasetSnapshotRequestDto), bool? ifExistsOk = true, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDatasetSnapshotWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, request, ifExistsOk, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetDatasetSnapshot
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='datasetSnapshotName'>
            /// </param>
            public static DatasetSnapshotDto GetDatasetSnapshot(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string datasetSnapshotName)
            {
                return operations.GetDatasetSnapshotAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, datasetSnapshotName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetDatasetSnapshot
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='datasetSnapshotName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetSnapshotDto> GetDatasetSnapshotAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string datasetSnapshotName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetSnapshotWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, datasetSnapshotName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// DeleteDatasetSnapshot
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='datasetSnapshotName'>
            /// </param>
            public static void DeleteDatasetSnapshot(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string datasetSnapshotName)
            {
                operations.DeleteDatasetSnapshotAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, datasetSnapshotName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// DeleteDatasetSnapshot
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='workspaceName'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='datasetSnapshotName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDatasetSnapshotAsync(this IDataset operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, System.Guid datasetId, string datasetSnapshotName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDatasetSnapshotWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, datasetId, datasetSnapshotName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void Ping(this IDataset operations)
            {
                operations.PingAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PingAsync(this IDataset operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PingWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void Ping1(this IDataset operations)
            {
                operations.Ping1Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Ping1Async(this IDataset operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Ping1WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MetaApiVersionResponse GetServiceVersionMetadata(this IDataset operations)
            {
                return operations.GetServiceVersionMetadataAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetaApiVersionResponse> GetServiceVersionMetadataAsync(this IDataset operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServiceVersionMetadataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
