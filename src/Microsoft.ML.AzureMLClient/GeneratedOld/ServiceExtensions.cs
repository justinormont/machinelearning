// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Service.
    /// </summary>
    public static partial class ServiceExtensions
    {
            /// <summary>
            /// Create a service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='request'>
            /// The payload that is used to create a Service.
            /// </param>
            public static ServiceCreateHeaders Create(this IService operations, System.Guid subscriptionId, string resourceGroupName, string workspace, ServiceCreateRequest request)
            {
                return operations.CreateAsync(subscriptionId, resourceGroupName, workspace, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='request'>
            /// The payload that is used to create a Service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceCreateHeaders> CreateAsync(this IService operations, System.Guid subscriptionId, string resourceGroupName, string workspace, ServiceCreateRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspace, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Query the list of Services in an account. If no filter is passed, the query
            /// lists all Services in the account. The returned list is paginated and the
            /// count of item in each page is an optional parameter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='tag'>
            /// The object tag.
            /// </param>
            /// <param name='tags'>
            /// The object key-value tags.
            /// </param>
            /// <param name='properties'>
            /// The object key-value properties.
            /// </param>
            /// <param name='name'>
            /// The object name.
            /// </param>
            /// <param name='imageId'>
            /// The Image id.
            /// </param>
            /// <param name='imageName'>
            /// The Image name.
            /// </param>
            /// <param name='modelId'>
            /// The Model id.
            /// </param>
            /// <param name='modelName'>
            /// The Model name.
            /// </param>
            /// <param name='count'>
            /// The number of items to retrieve in a page
            /// </param>
            /// <param name='computeType'>
            /// Type of compute to filter by.
            /// </param>
            /// <param name='skipToken'>
            /// The continuation token to retrieve the next page
            /// </param>
            /// <param name='orderby'>
            /// </param>
            public static PaginatedServiceList ListQuery(this IService operations, System.Guid subscriptionId, string resourceGroupName, string workspace, string tag = default(string), string tags = default(string), string properties = default(string), string name = default(string), string imageId = default(string), string imageName = default(string), string modelId = default(string), string modelName = default(string), string count = default(string), string computeType = default(string), string skipToken = default(string), IList<string> orderby = default(IList<string>))
            {
                return operations.ListQueryAsync(subscriptionId, resourceGroupName, workspace, tag, tags, properties, name, imageId, imageName, modelId, modelName, count, computeType, skipToken, orderby).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query the list of Services in an account. If no filter is passed, the query
            /// lists all Services in the account. The returned list is paginated and the
            /// count of item in each page is an optional parameter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='tag'>
            /// The object tag.
            /// </param>
            /// <param name='tags'>
            /// The object key-value tags.
            /// </param>
            /// <param name='properties'>
            /// The object key-value properties.
            /// </param>
            /// <param name='name'>
            /// The object name.
            /// </param>
            /// <param name='imageId'>
            /// The Image id.
            /// </param>
            /// <param name='imageName'>
            /// The Image name.
            /// </param>
            /// <param name='modelId'>
            /// The Model id.
            /// </param>
            /// <param name='modelName'>
            /// The Model name.
            /// </param>
            /// <param name='count'>
            /// The number of items to retrieve in a page
            /// </param>
            /// <param name='computeType'>
            /// Type of compute to filter by.
            /// </param>
            /// <param name='skipToken'>
            /// The continuation token to retrieve the next page
            /// </param>
            /// <param name='orderby'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedServiceList> ListQueryAsync(this IService operations, System.Guid subscriptionId, string resourceGroupName, string workspace, string tag = default(string), string tags = default(string), string properties = default(string), string name = default(string), string imageId = default(string), string imageName = default(string), string modelId = default(string), string modelName = default(string), string count = default(string), string computeType = default(string), string skipToken = default(string), IList<string> orderby = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspace, tag, tags, properties, name, imageId, imageName, modelId, modelName, count, computeType, skipToken, orderby, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specific service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The object id.
            /// </param>
            public static void Delete(this IService operations, System.Guid subscriptionId, string resourceGroupName, string workspace, string id)
            {
                operations.DeleteAsync(subscriptionId, resourceGroupName, workspace, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specific service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The object id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IService operations, System.Guid subscriptionId, string resourceGroupName, string workspace, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspace, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
