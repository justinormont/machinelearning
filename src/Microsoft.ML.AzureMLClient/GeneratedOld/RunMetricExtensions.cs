// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RunMetric.
    /// </summary>
    public static partial class RunMetricExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='metricDto'>
            /// </param>
            public static void Post(this IRunMetric operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, MetricDto metricDto = default(MetricDto))
            {
                operations.PostAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, metricDto).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='metricDto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostAsync(this IRunMetric operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, MetricDto metricDto = default(MetricDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, metricDto, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='batchMetricDto'>
            /// </param>
            public static void PostBatch(this IRunMetric operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, BatchMetricDto batchMetricDto = default(BatchMetricDto))
            {
                operations.PostBatchAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, batchMetricDto).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='runId'>
            /// </param>
            /// <param name='batchMetricDto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostBatchAsync(this IRunMetric operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, BatchMetricDto batchMetricDto = default(BatchMetricDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostBatchWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, batchMetricDto, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='metricId'>
            /// </param>
            public static RunMetricDto Get(this IRunMetric operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, System.Guid metricId)
            {
                return operations.GetAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, metricId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='metricId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RunMetricDto> GetAsync(this IRunMetric operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, System.Guid metricId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, metricId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='orderby'>
            /// </param>
            /// <param name='sortorder'>
            /// Possible values include: 'Asc', 'Desc'
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='mergestrategytype'>
            /// Possible values include: 'Default', 'None', 'MergeToVector'
            /// </param>
            /// <param name='mergestrategyoptions'>
            /// Possible values include: 'None', 'ReportUnmergedMetricsValues'
            /// </param>
            /// <param name='mergestrategysettingsversion'>
            /// </param>
            /// <param name='mergestrategysettingsselectmetrics'>
            /// Possible values include: 'SelectAll', 'SelectByFirstValueSchema'
            /// </param>
            public static PaginatedRunMetricDto List(this IRunMetric operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string filter = default(string), string continuationToken = default(string), IList<string> orderby = default(IList<string>), string sortorder = default(string), int? top = default(int?), string mergestrategytype = default(string), string mergestrategyoptions = default(string), string mergestrategysettingsversion = default(string), string mergestrategysettingsselectmetrics = default(string))
            {
                return operations.ListAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, filter, continuationToken, orderby, sortorder, top, mergestrategytype, mergestrategyoptions, mergestrategysettingsversion, mergestrategysettingsselectmetrics).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='orderby'>
            /// </param>
            /// <param name='sortorder'>
            /// Possible values include: 'Asc', 'Desc'
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='mergestrategytype'>
            /// Possible values include: 'Default', 'None', 'MergeToVector'
            /// </param>
            /// <param name='mergestrategyoptions'>
            /// Possible values include: 'None', 'ReportUnmergedMetricsValues'
            /// </param>
            /// <param name='mergestrategysettingsversion'>
            /// </param>
            /// <param name='mergestrategysettingsselectmetrics'>
            /// Possible values include: 'SelectAll', 'SelectByFirstValueSchema'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedRunMetricDto> ListAsync(this IRunMetric operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string filter = default(string), string continuationToken = default(string), IList<string> orderby = default(IList<string>), string sortorder = default(string), int? top = default(int?), string mergestrategytype = default(string), string mergestrategyoptions = default(string), string mergestrategysettingsversion = default(string), string mergestrategysettingsselectmetrics = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, filter, continuationToken, orderby, sortorder, top, mergestrategytype, mergestrategyoptions, mergestrategysettingsversion, mergestrategysettingsselectmetrics, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='queryParams'>
            /// </param>
            /// <param name='mergestrategytype'>
            /// Possible values include: 'Default', 'None', 'MergeToVector'
            /// </param>
            /// <param name='mergestrategyoptions'>
            /// Possible values include: 'None', 'ReportUnmergedMetricsValues'
            /// </param>
            /// <param name='mergestrategysettingsversion'>
            /// </param>
            /// <param name='mergestrategysettingsselectmetrics'>
            /// Possible values include: 'SelectAll', 'SelectByFirstValueSchema'
            /// </param>
            public static PaginatedRunMetricDto GetByQuery(this IRunMetric operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, QueryParamsDto queryParams = default(QueryParamsDto), string mergestrategytype = default(string), string mergestrategyoptions = default(string), string mergestrategysettingsversion = default(string), string mergestrategysettingsselectmetrics = default(string))
            {
                return operations.GetByQueryAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, queryParams, mergestrategytype, mergestrategyoptions, mergestrategysettingsversion, mergestrategysettingsselectmetrics).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// </param>
            /// <param name='queryParams'>
            /// </param>
            /// <param name='mergestrategytype'>
            /// Possible values include: 'Default', 'None', 'MergeToVector'
            /// </param>
            /// <param name='mergestrategyoptions'>
            /// Possible values include: 'None', 'ReportUnmergedMetricsValues'
            /// </param>
            /// <param name='mergestrategysettingsversion'>
            /// </param>
            /// <param name='mergestrategysettingsselectmetrics'>
            /// Possible values include: 'SelectAll', 'SelectByFirstValueSchema'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedRunMetricDto> GetByQueryAsync(this IRunMetric operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, QueryParamsDto queryParams = default(QueryParamsDto), string mergestrategytype = default(string), string mergestrategyoptions = default(string), string mergestrategysettingsversion = default(string), string mergestrategysettingsselectmetrics = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByQueryWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, queryParams, mergestrategytype, mergestrategyoptions, mergestrategysettingsversion, mergestrategysettingsselectmetrics, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
