// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Jasmine operations.
    /// </summary>
    public partial interface IJasmine
    {
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='experimentName'>
        /// </param>
        /// <param name='parentRunId'>
        /// </param>
        /// <param name='jsonDefinition'>
        /// </param>
        /// <param name='file'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<RunStatus>> PostRemoteRunWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string parentRunId, string jsonDefinition = default(string), IList<object> file = default(IList<object>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='experimentName'>
        /// </param>
        /// <param name='parentRunId'>
        /// </param>
        /// <param name='jsonDefinition'>
        /// </param>
        /// <param name='snapshotId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<RunStatus>> PostRemoteSnapshotRunWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string parentRunId, string jsonDefinition = default(string), System.Guid? snapshotId = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='experimentName'>
        /// </param>
        /// <param name='parentrunId'>
        /// </param>
        /// <param name='updatedIterations'>
        /// </param>
        /// <param name='updatedTime'>
        /// </param>
        /// <param name='updatedExitScore'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> ContinueRunWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string parentrunId, int? updatedIterations = default(int?), int? updatedTime = default(int?), double? updatedExitScore = default(double?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='experimentName'>
        /// </param>
        /// <param name='parentrunId'>
        /// </param>
        /// <param name='updatedIterations'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> ContinueRunLegacyWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string parentrunId, int updatedIterations, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='experimentName'>
        /// </param>
        /// <param name='createParentRunDto'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<string>> CreateParentRunWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, CreateParentRunDto createParentRunDto = default(CreateParentRunDto), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='experimentName'>
        /// </param>
        /// <param name='parentRunId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IterationTaskDto>> LocalRunGetNextTaskWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string parentRunId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='experimentName'>
        /// </param>
        /// <param name='parentRunId'>
        /// </param>
        /// <param name='workerId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PipelineDto>> GetPipelineWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string parentRunId, string workerId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='experimentName'>
        /// </param>
        /// <param name='parentRunId'>
        /// </param>
        /// <param name='targetStatus'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> ParentRunStatusWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string parentRunId, string targetStatus, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='resourceGroupName'>
        /// </param>
        /// <param name='workspaceName'>
        /// </param>
        /// <param name='experimentName'>
        /// </param>
        /// <param name='runId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> CancelChildRunWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
