// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.MachineLearning.Services.GeneratedOld
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// These APIs allow end users to operate on Azure Machine Learning
    /// Workspace resources.
    /// </summary>
    public partial class RestClient : ServiceClient<RestClient>, IRestClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// The description of the object.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// The option to show model details
        /// </summary>
        public bool? Expand { get; set; }

        /// <summary>
        /// Subscription credentials which uniquely identify client subscription.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Gets the IDataStores.
        /// </summary>
        public virtual IDataStores DataStores { get; private set; }

        /// <summary>
        /// Gets the IDataset.
        /// </summary>
        public virtual IDataset Dataset { get; private set; }

        /// <summary>
        /// Gets the IJasmine.
        /// </summary>
        public virtual IJasmine Jasmine { get; private set; }

        /// <summary>
        /// Gets the IModelOperations.
        /// </summary>
        public virtual IModelOperations Model { get; private set; }

        /// <summary>
        /// Gets the IAssetOperations.
        /// </summary>
        public virtual IAssetOperations Asset { get; private set; }

        /// <summary>
        /// Gets the IImageOperations.
        /// </summary>
        public virtual IImageOperations Image { get; private set; }

        /// <summary>
        /// Gets the IOperations.
        /// </summary>
        public virtual IOperations Operations { get; private set; }

        /// <summary>
        /// Gets the ISwagger.
        /// </summary>
        public virtual ISwagger Swagger { get; private set; }

        /// <summary>
        /// Gets the IService.
        /// </summary>
        public virtual IService Service { get; private set; }

        /// <summary>
        /// Gets the IEvents.
        /// </summary>
        public virtual IEvents Events { get; private set; }

        /// <summary>
        /// Gets the IExperiment.
        /// </summary>
        public virtual IExperiment Experiment { get; private set; }

        /// <summary>
        /// Gets the IRun.
        /// </summary>
        public virtual IRun Run { get; private set; }

        /// <summary>
        /// Gets the IRunMetric.
        /// </summary>
        public virtual IRunMetric RunMetric { get; private set; }

        /// <summary>
        /// Gets the IRunArtifact.
        /// </summary>
        public virtual IRunArtifact RunArtifact { get; private set; }

        /// <summary>
        /// Gets the ISnapshot.
        /// </summary>
        public virtual ISnapshot Snapshot { get; private set; }

        /// <summary>
        /// Gets the IWorkspaces.
        /// </summary>
        public virtual IWorkspaces Workspaces { get; private set; }

        /// <summary>
        /// Gets the IUsages.
        /// </summary>
        public virtual IUsages Usages { get; private set; }

        /// <summary>
        /// Gets the IVirtualMachineSizes.
        /// </summary>
        public virtual IVirtualMachineSizes VirtualMachineSizes { get; private set; }

        /// <summary>
        /// Gets the IMachineLearningCompute.
        /// </summary>
        public virtual IMachineLearningCompute MachineLearningCompute { get; private set; }

        /// <summary>
        /// Initializes a new instance of the RestClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling RestClient.Dispose(). False: will not dispose provided httpClient</param>
        protected RestClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the RestClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected RestClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the RestClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected RestClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the RestClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected RestClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the RestClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected RestClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the RestClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RestClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the RestClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling RestClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RestClient(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the RestClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RestClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the RestClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RestClient(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the RestClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RestClient(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            DataStores = new DataStores(this);
            Dataset = new Dataset(this);
            Jasmine = new Jasmine(this);
            Model = new ModelOperations(this);
            Asset = new AssetOperations(this);
            Image = new ImageOperations(this);
            Operations = new Operations(this);
            Swagger = new Swagger(this);
            Service = new Service(this);
            Events = new Events(this);
            Experiment = new Experiment(this);
            Run = new Run(this);
            RunMetric = new RunMetric(this);
            RunArtifact = new RunArtifact(this);
            Snapshot = new Snapshot(this);
            Workspaces = new Workspaces(this);
            Usages = new Usages(this);
            VirtualMachineSizes = new VirtualMachineSizes(this);
            MachineLearningCompute = new MachineLearningCompute(this);
            BaseUri = new System.Uri("http://localhost");
            Expand = false;
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ServiceResponseBase>("computeType"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<ServiceResponseBase>("computeType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ImageRequestBase>("imageRequestTypeDiscriminator"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<ImageRequestBase>("imageRequestTypeDiscriminator"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ServiceCreateRequest>("serviceCreateRequestTypeDiscriminator"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<ServiceCreateRequest>("serviceCreateRequestTypeDiscriminator"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<Compute>("computeType"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<Compute>("computeType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ComputeNodesInformation>("computeType"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<ComputeNodesInformation>("computeType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ComputeSecrets>("computeType"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<ComputeSecrets>("computeType"));
            CustomInitialize();
            DeserializationSettings.Converters.Add(new TransformationJsonConverter());
        }
    }
}
